{"version":3,"file":"Router.js","sourceRoot":"","sources":["../../src/app/Router.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sDAA8B;AAE9B,mDAAqC;AACrC,iFAA0C;AAE1C,MAAM,MAAM,GAAG,iBAAO,CAAC,MAAM,EAAE,CAAC;AAEhC,SAAS,WAAW,CAAC,EAAU,EAAE,KAAc;IAC7C,2BAAE,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,2BAAE,CAAC,eAAe,CAAC,2CAA2C,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;AAC3G,CAAC;AAED,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAC3B,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,KAAc,EAAE,EAAE,CAAC,WAAW,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;AACjF,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAClC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,KAAc,EAAE,EAAE,CAAC,WAAW,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;AACrF,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAC/B,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAChD,MAAM,EAAC,OAAO,EAAE,MAAM,EAAC,GAAG,GAAG,CAAC,MAAM,CAAC;IACrC,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,KAAc,EAAE,EAAE,CAAC,WAAW,CAAC,UAAU,OAAO,IAAI,MAAM,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;AAC3H,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,uBAAuB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAC/C,MAAM,EAAC,OAAO,EAAE,MAAM,EAAC,GAAG,GAAG,CAAC,MAAM,CAAC;IACrC,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,KAAc,EAAE,EAAE,CAAC,WAAW,CAAC,UAAU,OAAO,IAAI,MAAM,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;AAC5H,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IACrC,MAAM,EAAC,IAAI,EAAC,GAAG,GAAG,CAAC,MAAM,CAAC;IAC1B,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC","sourcesContent":["import express from 'express';\n\nimport * as handler from './Handler';\nimport np from '../lib/NowPlayingContext';\n\nconst router = express.Router();\n\nfunction stdLogError(fn: string, error: unknown) {\n  np.getLogger().error(np.getErrorMessage(`[now-playing] Caught error in router -> ${fn}:`, error, false));\n}\n\nrouter.get('/', (req, res) => {\n  handler.index(req, res).catch((error: unknown) => stdLogError('index', error));\n});\n\nrouter.get('/preview', (req, res) => {\n  handler.preview(req, res).catch((error: unknown) => stdLogError('preview', error));\n});\n\nrouter.get('/mybg', (req, res) => {\n  handler.myBackground(req.query, res);\n});\n\nrouter.post('/api/:apiName/:method', (req, res) => {\n  const {apiName, method} = req.params;\n  handler.api(apiName, method, req.body, res).catch((error: unknown) => stdLogError(`api -> ${apiName}.${method}`, error));\n});\n\nrouter.get('/api/:apiName/:method', (req, res) => {\n  const {apiName, method} = req.params;\n  handler.api(apiName, method, req.query, res).catch((error: unknown) => stdLogError(`api -> ${apiName}.${method}`, error));\n});\n\nrouter.get('/font/:file', (req, res) => {\n  const {file} = req.params;\n  handler.font(file, res);\n});\n\nexport default router;\n"]}