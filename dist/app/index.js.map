{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/app/index.ts"],"names":[],"mappings":";;;;;AA8BA,sBAgBC;AAED,oBAKC;AArDD,sDAA8B;AAC9B,gDAAwB;AAExB,sDAA8B;AAC9B,iFAA0C;AAE1C,MAAM,GAAG,GAAG,IAAA,iBAAO,GAAE,CAAC;AAEtB,GAAG,CAAC,GAAG,CAAC,IAAA,cAAI,GAAE,CAAC,CAAC;AAChB,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,IAAI,EAAE,CAAC,CAAC;AACxB,mDAAmD;AAEnD,SAAS;AACT,GAAG,CAAC,GAAG,CAAC,gBAAM,CAAC,CAAC;AAChB,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,iBAAO,CAAC,MAAM,CAAC,GAAG,SAAS,SAAS,CAAC,CAAC,CAAC;AAC1D,GAAG,CAAC,GAAG,CAAC,eAAe,EAAE,iBAAO,CAAC,MAAM,CAAC,GAAG,SAAS,0BAA0B,CAAC,CAAC,CAAC;AACjF,GAAG,CAAC,GAAG,CAAC,kBAAkB,EAAE,iBAAO,CAAC,MAAM,CAAC,GAAG,SAAS,6BAA6B,CAAC,CAAC,CAAC;AACvF,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,iBAAO,CAAC,MAAM,CAAC,GAAG,SAAS,gBAAgB,CAAC,CAAC,CAAC;AAClE,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,MAAM,CAAC,GAAG,SAAS,eAAe,CAAC,CAAC,CAAC;AACrD,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE;IAC3B,IAAI,CAAC,GAAG,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC;AACH,GAAG,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,IAAqB,EAAE,GAAqB,EAAE,EAAE;IACjE,2BAAE,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,2BAAE,CAAC,eAAe,CAAC,0BAA0B,EAAE,GAAG,CAAC,CAAC,CAAC;IAC1E,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC;IAC9B,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC;AAEH,IAAI,MAAM,GAAuB,IAAI,CAAC;AAEtC,SAAgB,KAAK;IACnB,IAAI,MAAM,EAAE,CAAC;QACX,2BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;QACzD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IACD,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC3C,MAAM,IAAI,GAAG,2BAAE,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACvC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;YAC7B,2BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,0CAA0C,IAAI,GAAG,CAAC,CAAC;YACvE,OAAO,EAAE,CAAC;QACZ,CAAC,CAAC;aACC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE;YACnB,2BAAE,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,2BAAE,CAAC,eAAe,CAAC,0BAA0B,EAAE,GAAG,CAAC,CAAC,CAAC;YAC1E,MAAM,CAAC,GAAG,CAAC,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,IAAI;IAClB,IAAI,MAAM,EAAE,CAAC;QACX,MAAM,CAAC,KAAK,EAAE,CAAC;QACf,MAAM,GAAG,IAAI,CAAC;IAChB,CAAC;AACH,CAAC","sourcesContent":["import express from 'express';\nimport cors from 'cors';\nimport type http from 'http';\nimport router from './Router';\nimport np from '../lib/NowPlayingContext';\n\nconst app = express();\n\napp.use(cors());\napp.use(express.json());\n//App.use(express.urlencoded({ extended: false }));\n\n// Routes\napp.use(router);\napp.use('/assets', express.static(`${__dirname}/assets`));\napp.use('/genius_setup', express.static(`${__dirname}/views/genius_setup.html`));\napp.use('/geo_coord_setup', express.static(`${__dirname}/views/geo_coord_setup.html`));\napp.use('/preview', express.static(`${__dirname}/preview/build`));\napp.use(express.static(`${__dirname}/client/build`));\napp.use((_req, _res, next) => {\n  next(404);\n});\napp.use((err: any, _req: express.Request, res: express.Response) => {\n  np.getLogger().error(np.getErrorMessage('[now-playing] App error:', err));\n  res.status(err.status || 500);\n  res.sendStatus(err);\n});\n\nlet server: http.Server | null = null;\n\nexport function start() {\n  if (server) {\n    np.getLogger().info('[now-playing] App already started');\n    return Promise.resolve();\n  }\n  return new Promise<void>((resolve, reject) => {\n    const port = np.getConfigValue('port');\n    server = app.listen(port, () => {\n      np.getLogger().info(`[now-playing] App is listening on port ${port}.`);\n      resolve();\n    })\n      .on('error', (err) => {\n        np.getLogger().error(np.getErrorMessage('[now-playing] App error:', err));\n        reject(err);\n      });\n  });\n}\n\nexport function stop() {\n  if (server) {\n    server.close();\n    server = null;\n  }\n}\n"]}