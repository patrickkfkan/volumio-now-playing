{"version":3,"file":"MyBackgroundMonitor.js","sourceRoot":"","sources":["../../../src/lib/utils/MyBackgroundMonitor.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport * as SystemUtils from './System';\nimport np from '../NowPlayingContext';\nimport chokidar from 'chokidar';\n\nconst MY_BACKGROUNDS_PATH = '/data/INTERNAL/NowPlayingPlugin/My Backgrounds';\nconst ACCEPT_EXTENSIONS = [\n  '.jpg',\n  '.jpeg',\n  '.png',\n  '.gif'\n];\n\nclass MyBackgroundMonitor {\n\n  #images: Array<{name: string; path: string}>;\n  #status: 'running' | 'stopped';\n  #watcher: ReturnType<typeof chokidar['watch']> | null;\n  #isSorted: boolean;\n\n  constructor() {\n    this.#images = [];\n    this.#status = 'stopped';\n    this.#watcher = null;\n    this.#isSorted = false;\n  }\n\n  getImages() {\n    if (this.#status !== 'running') {\n      np.getLogger().warn('[now-playing] MyBackgroundMonitor is not running. Returning empty image list.');\n      return [];\n    }\n    if (!this.#isSorted) {\n      this.#sortImages();\n    }\n    return this.#images;\n  }\n\n  start() {\n    if (!SystemUtils.dirExists(MY_BACKGROUNDS_PATH)) {\n      np.getLogger().warn(`[now-playing] ${MY_BACKGROUNDS_PATH} does not exist. MyBackgroundMonitor will not start.`);\n      return;\n    }\n    this.#watcher = chokidar.watch(MY_BACKGROUNDS_PATH);\n    this.#watcher.on('add', this.#handleWatcherEvent.bind(this, 'add'));\n    this.#watcher.on('unlink', this.#handleWatcherEvent.bind(this, 'unlink'));\n    np.getLogger().warn(`[now-playing] MyBackgroundMonitor is now watching ${MY_BACKGROUNDS_PATH}`);\n    this.#status = 'running';\n  }\n\n  async stop() {\n    if (this.#watcher) {\n      await this.#watcher.close();\n      this.#watcher = null;\n    }\n    this.#images = [];\n    this.#isSorted = false;\n    this.#status = 'stopped';\n    np.getLogger().warn('[now-playing] MyBackgroundMonitor stopped');\n  }\n\n  #handleWatcherEvent(event: string, pathToFile: string) {\n    const { ext, base } = path.parse(pathToFile);\n\n    if (!ACCEPT_EXTENSIONS.includes(ext)) {\n      return;\n    }\n    np.getLogger().info(`[now-playing] MyBackgroundMonitor captured '${event}': ${base}`);\n\n    switch (event) {\n      case 'add':\n        this.#images.push({\n          name: base,\n          path: path.resolve(pathToFile)\n        });\n        this.#isSorted = false;\n        break;\n      case 'unlink': {\n        const index = this.#images.findIndex((image) => image.name === base);\n        if (index >= 0) {\n          this.#images.splice(index, 1);\n        }\n        break;\n      }\n      default:\n\n    }\n  }\n\n  #sortImages() {\n    this.#images.sort((img1, img2) => img1.name.localeCompare(img2.name));\n    this.#isSorted = true;\n  }\n}\n\nconst myBackgroundMonitor = new MyBackgroundMonitor();\n\nexport default myBackgroundMonitor;\n"]}