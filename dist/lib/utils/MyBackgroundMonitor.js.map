{"version":3,"file":"MyBackgroundMonitor.js","sourceRoot":"","sources":["../../../src/lib/utils/MyBackgroundMonitor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,gDAAwB;AACxB,6EAAsC;AACtC,4DAAoC;AAEpC,MAAM,mBAAmB,GAAG,gDAAgD,CAAC;AAC7E,MAAM,iBAAiB,GAAG;IACxB,MAAM;IACN,OAAO;IACP,MAAM;IACN,MAAM;CACP,CAAC;AAEF,MAAM,mBAAoB,SAAQ,mBAAS;IAOzC;QACE,KAAK,CAAC,mBAAmB,CAAC,CAAC;;QAN7B,SAAI,GAAG,qBAAqB,CAAC;QAE7B,8CAA6C;QAC7C,gDAAmB;QAIjB,uBAAA,IAAI,+BAAW,EAAE,MAAA,CAAC;QAClB,uBAAA,IAAI,iCAAa,KAAK,MAAA,CAAC;IACzB,CAAC;IAED,SAAS;QACP,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,EAAE;YAC7B,2BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,+EAA+E,CAAC,CAAC;YACrG,OAAO,EAAE,CAAC;SACX;QACD,IAAI,CAAC,uBAAA,IAAI,qCAAU,EAAE;YACnB,uBAAA,IAAI,uEAAY,MAAhB,IAAI,CAAc,CAAC;SACpB;QACD,OAAO,uBAAA,IAAI,mCAAQ,CAAC;IACtB,CAAC;IAED,KAAK,CAAC,IAAI;QACR,KAAK,CAAC,IAAI,EAAE,CAAC;QACb,uBAAA,IAAI,+BAAW,EAAE,MAAA,CAAC;QAClB,uBAAA,IAAI,iCAAa,KAAK,MAAA,CAAC;IACzB,CAAC;IAES,WAAW,CAAC,KAAgD,EAAE,KAAa;QACnF,IAAI,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,QAAQ,EAAE;YACzC,OAAQ;SACT;QACD,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,cAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAExC,IAAI;YACF,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gBACpC,OAAO;aACR;SACF;QACD,OAAO,KAAK,EAAE;YACZ,2BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,2BAAE,CAAC,eAAe,CAAC,qDAAqD,KAAK,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;YACrH,OAAO;SACR;QAED,2BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,+CAA+C,KAAK,MAAM,IAAI,EAAE,CAAC,CAAC;QAEtF,QAAQ,KAAK,EAAE;YACb,KAAK,KAAK;gBACR,uBAAA,IAAI,mCAAQ,CAAC,IAAI,CAAC;oBAChB,IAAI,EAAE,IAAI;oBACV,IAAI,EAAE,cAAI,CAAC,OAAO,CAAC,KAAK,CAAC;iBAC1B,CAAC,CAAC;gBACH,uBAAA,IAAI,iCAAa,KAAK,MAAA,CAAC;gBACvB,MAAM;YACR,KAAK,QAAQ;gBACX,MAAM,KAAK,GAAG,uBAAA,IAAI,mCAAQ,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;gBACrE,IAAI,KAAK,IAAI,CAAC,EAAE;oBACd,uBAAA,IAAI,mCAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;iBAC/B;gBACD,MAAM;YACR,QAAQ;SACT;IACH,CAAC;CAMF;;IAHG,uBAAA,IAAI,mCAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACtE,uBAAA,IAAI,iCAAa,IAAI,MAAA,CAAC;AACxB,CAAC;AAGH,MAAM,mBAAmB,GAAG,IAAI,mBAAmB,EAAE,CAAC;AAEtD,kBAAe,mBAAmB,CAAC","sourcesContent":["import path from 'path';\nimport np from '../NowPlayingContext';\nimport FSMonitor from './FSMonitor';\n\nconst MY_BACKGROUNDS_PATH = '/data/INTERNAL/NowPlayingPlugin/My Backgrounds';\nconst ACCEPT_EXTENSIONS = [\n  '.jpg',\n  '.jpeg',\n  '.png',\n  '.gif'\n];\n\nclass MyBackgroundMonitor extends FSMonitor {\n\n  name = 'MyBackgroundMonitor';\n\n  #images: Array<{name: string; path: string}>;\n  #isSorted: boolean;\n\n  constructor() {\n    super(MY_BACKGROUNDS_PATH);\n    this.#images = [];\n    this.#isSorted = false;\n  }\n\n  getImages() {\n    if (this.status !== 'running') {\n      np.getLogger().warn('[now-playing] MyBackgroundMonitor is not running. Returning empty image list.');\n      return [];\n    }\n    if (!this.#isSorted) {\n      this.#sortImages();\n    }\n    return this.#images;\n  }\n\n  async stop() {\n    super.stop();\n    this.#images = [];\n    this.#isSorted = false;\n  }\n\n  protected handleEvent(event: 'add' | 'unlink' | 'addDir' | 'unlinkDir', _path: string): void {\n    if (event !== 'add' && event !== 'unlink') {\n      return ;\n    }\n    const { ext, base } = path.parse(_path);\n\n    try {\n      if (!ACCEPT_EXTENSIONS.includes(ext)) {\n        return;\n      }\n    }\n    catch (error) {\n      np.getLogger().info(np.getErrorMessage(`[now-playing] MyBackgroundMonitor failed to stat '${_path}':`, error, true));\n      return;\n    }\n\n    np.getLogger().info(`[now-playing] MyBackgroundMonitor captured '${event}': ${base}`);\n\n    switch (event) {\n      case 'add':\n        this.#images.push({\n          name: base,\n          path: path.resolve(_path)\n        });\n        this.#isSorted = false;\n        break;\n      case 'unlink':\n        const index = this.#images.findIndex((image) => image.name === base);\n        if (index >= 0) {\n          this.#images.splice(index, 1);\n        }\n        break;\n      default:\n    }\n  }\n\n  #sortImages() {\n    this.#images.sort((img1, img2) => img1.name.localeCompare(img2.name));\n    this.#isSorted = true;\n  }\n}\n\nconst myBackgroundMonitor = new MyBackgroundMonitor();\n\nexport default myBackgroundMonitor;\n"]}