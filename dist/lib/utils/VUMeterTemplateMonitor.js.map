{"version":3,"file":"VUMeterTemplateMonitor.js","sourceRoot":"","sources":["../../../src/lib/utils/VUMeterTemplateMonitor.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport np from '../NowPlayingContext';\nimport FSMonitor from './FSMonitor';\nimport { VUMeter } from 'now-playing-common';\nimport VUMeterConfigParser from './VUMeterConfigParser';\nimport { rnd } from './Misc';\nimport { listDirectories } from './System';\nimport chokidar from 'chokidar';\nimport Queue from 'queue';\n\nexport const VU_METER_TEMPLATE_PATH = '/data/INTERNAL/NowPlayingPlugin/VU Meter Templates';\n\nclass VUMeterTemplateMonitor extends FSMonitor<['addDir', 'unlinkDir']> {\n\n  name = 'VUMeterTemplateMonitor';\n\n  #templateFolderMonitors: Record<string, ReturnType<typeof chokidar['watch']>>;\n  #templates: Array<{name: string; meters: VUMeter[]}>;\n  #isSorted: boolean;\n  #queue: Queue;\n  #isTemplateUpdating: boolean;\n\n  constructor() {\n    super(VU_METER_TEMPLATE_PATH, [ 'addDir', 'unlinkDir' ]);\n    this.#templateFolderMonitors = {};\n    this.#templates = [];\n    this.#isSorted = false;\n    this.#queue = new Queue({\n      concurrency: 1,\n      autostart: true\n    });\n    this.#isTemplateUpdating = false;\n  }\n\n  getTemplates() {\n    if (this.status === 'stopped') {\n      np.getLogger().warn('[now-playing] VUMeterTemplateMonitor is not running. Returning empty image list.');\n      return [];\n    }\n    if (!this.#isSorted) {\n      this.#sortTemplates();\n    }\n    return this.#templates;\n  }\n\n  async getRandomTemplate() {\n    if (this.status === 'initializing') {\n      np.getLogger().info('[now-playing] Getting random template directly from template path');\n      const directories = await listDirectories(VU_METER_TEMPLATE_PATH);\n      if (directories.length === 0) {\n        return null;\n      }\n      return directories[rnd(0, directories.length - 1)];\n    }\n\n    if (this.#templates.length > 0) {\n      np.getLogger().info('[now-playing] Getting random template from loaded templates');\n      return this.#templates[rnd(0, this.#templates.length - 1)].name;\n    }\n\n    return null;\n  }\n\n  async stop() {\n    this.#queue.end();\n    const closeMonitorPromises = Object.keys(this.#templateFolderMonitors).map((t) => this.#removeTemplateFolderMonitor(t));\n    await Promise.all(closeMonitorPromises);\n    this.#templateFolderMonitors = {};\n    await super.stop();\n    this.#templates = [];\n    this.#isSorted = false;\n    this.#isTemplateUpdating = false;\n  }\n\n  async #removeTemplateFolderMonitor(template: string) {\n    const monitor = this.#templateFolderMonitors[template];\n    if (monitor) {\n      try {\n        monitor.removeAllListeners();\n        await monitor.close();\n      }\n      catch (error) {\n        np.getLogger().warn(np.getErrorMessage(\n          `[now-playing] VUMeterTemplateMonitor failed to close template folder monitor for '${template}':`, error, true));\n      }\n      finally {\n        delete this.#templateFolderMonitors[template];\n      }\n    }\n  }\n\n  protected handleEvent(event: 'addDir' | 'unlinkDir', _path: string): void {\n    const { base: template } = path.parse(_path);\n\n    np.getLogger().info(`[now-playing] VUMeterTemplateMonitor captured '${event}': ${template}`);\n\n    switch (event) {\n      case 'addDir':\n        this.#queue.push(() => this.#addTemplateFolderMonitor(template));\n        break;\n      case 'unlinkDir':\n        this.#queue.push(async () => {\n          await this.#removeTemplateFolderMonitor(template);\n          this.#removeTemplate(template);\n        });\n        break;\n    }\n  }\n\n  #sortTemplates() {\n    this.#templates.sort((t1, t2) => t1.name.localeCompare(t2.name));\n    this.#isSorted = true;\n  }\n\n  async #addTemplateFolderMonitor(template: string) {\n    await this.#removeTemplateFolderMonitor(template);\n    const templatePath = `${VU_METER_TEMPLATE_PATH}/${template}`;\n    const monitor = chokidar.watch(templatePath);\n    this.#templateFolderMonitors[template] = monitor;\n\n    const _parseAndAdd = (silent = false) => {\n      if (!this.#templates.find((t) => t.name === template)) {\n        this.#isTemplateUpdating = true;\n        const config = VUMeterConfigParser.getConfig(template);\n        if (config.meters) {\n          this.#templates.push({\n            name: template,\n            meters: config.meters\n          });\n          this.#isSorted = false;\n          if (!silent) {\n            np.getLogger().info(`[now-playing] Added VU meter template '${template}'`);\n          }\n        }\n        this.#isTemplateUpdating = false;\n      }\n    };\n\n    const _remove = (silent = false) => {\n      this.#isTemplateUpdating = true;\n      this.#removeTemplate(template, silent);\n      this.#isTemplateUpdating = false;\n    };\n\n    const _refresh = (silent = false) => {\n      _remove(true);\n      _parseAndAdd(true);\n      if (!silent) {\n        np.getLogger().info(`[now-playing] Refreshed VU meter template '${template}'`);\n      }\n    };\n\n    const _isMeterTxt = (_path: string) => {\n      const { base } = path.parse(_path);\n      return base === 'meters.txt';\n    };\n\n    monitor.on('add', (_path: string) => {\n      if (_isMeterTxt(_path)) {\n        _parseAndAdd();\n      }\n    });\n\n    monitor.on('unlink', (_path: string) => {\n      if (_isMeterTxt(_path)) {\n        _remove();\n      }\n    });\n\n    monitor.on('change', (_path: string) => {\n      if (_isMeterTxt(_path)) {\n        _refresh();\n      }\n    });\n\n    return monitor;\n  }\n\n  #removeTemplate(template: string, silent = false) {\n    const index = this.#templates.findIndex((t) => t.name === template);\n    if (index >= 0) {\n      this.#templates.splice(index, 1);\n      if (!silent) {\n        np.getLogger().info(`[now-playing] Removed VU meter template '${template}'`);\n      }\n    }\n  }\n\n  get status() {\n    const mainStatus = super.status;\n    if (this.#isTemplateUpdating && mainStatus === 'running') {\n      return 'updating';\n    }\n    return mainStatus;\n  }\n}\n\nconst vuMeterTemplateMonitor = new VUMeterTemplateMonitor();\n\nexport default vuMeterTemplateMonitor;\n"]}