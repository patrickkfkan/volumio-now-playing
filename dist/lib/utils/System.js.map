{"version":3,"file":"System.js","sourceRoot":"","sources":["../../../src/lib/utils/System.ts"],"names":[],"mappings":"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","sourcesContent":["import { exec, execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport pluginInfo from '../../../package.json';\nimport np from '../NowPlayingContext';\n\nexport interface PluginInfo {\n  appPort: number;\n  version: string | null;\n  appUrl: string;\n  previewUrl: string;\n  apiPath: string;\n}\n\nexport function fileExists(path: string) {\n  try {\n    return fs.existsSync(path) && fs.lstatSync(path).isFile();\n  }\n  catch (error) {\n    return false;\n  }\n}\n\nexport function dirExists(path: string) {\n  try {\n    return fs.existsSync(path) && fs.lstatSync(path).isDirectory();\n  }\n  catch (error) {\n    return false;\n  }\n}\n\nexport function findInFile(path: string, str: string) {\n  const contents = fs.readFileSync(path).toString();\n  const regex = new RegExp(`\\\\b${str}\\\\b`, 'gm');\n  return regex.test(contents);\n}\n\nexport function replaceInFile(path: string, search: string, replace: string) {\n  const cmd = `echo volumio | sudo -S sed -i 's/${search}/${replace}/g' \"${path}\"`;\n  return execSync(cmd, { uid: 1000, gid: 1000 });\n}\n\nexport function copyFile(src: string, dest: string, opts?: {\n  asRoot?: boolean;\n  createDestDirIfNotExists?: boolean;\n}) {\n  const asRoot = !!opts?.asRoot;\n  const createDestDirIfNotExists = !!opts?.createDestDirIfNotExists;\n  const cmdPrefix = asRoot ? 'echo volumio | sudo -S' : '';\n  if (createDestDirIfNotExists) {\n    const p = path.parse(dest);\n    execSync(`${cmdPrefix} mkdir -p \"${p.dir}\"`);\n  }\n  execSync(`${cmdPrefix} cp \"${src}\" \"${dest}\"`);\n}\n\nfunction systemctl(cmd: string, service: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const fullCmd = `/usr/bin/sudo /bin/systemctl ${cmd} ${service}`;\n    np.getLogger().info(`[now-playing] Executing ${fullCmd}`);\n    exec(fullCmd, { uid: 1000, gid: 1000 }, function (error, stdout, stderr) {\n      if (error) {\n        np.getLogger().error(np.getErrorMessage(`[now-playing] Failed to execute systemctl command ${cmd} on ${service}: ${stderr.toString()}`, error));\n        reject(error);\n      }\n      else {\n        resolve(stdout.toString());\n      }\n    });\n  });\n}\n\nexport async function isSystemdServiceActive(service: string) {\n  const out = await systemctl('status', service);\n  return out.indexOf('active') >= 0 && out.indexOf('inactive') == -1;\n}\n\nexport function restartSystemdService(service: string) {\n  return systemctl('restart', service);\n}\n\nexport function readdir(path: string, ignoreIfContains?: string) {\n  let files = fs.readdirSync(path);\n  if (ignoreIfContains) {\n    files = files.filter((f) => f.indexOf(ignoreIfContains) < 0);\n  }\n  return files;\n}\n\nexport function getPluginVersion() {\n  return pluginInfo.version || null;\n}\n\nexport function getPluginInfo(): PluginInfo {\n  let cached = np.get<PluginInfo>('pluginInfo');\n\n  if (!cached) {\n    const appPort = np.getConfigValue('port');\n    const version = getPluginVersion();\n    const thisDevice = np.getDeviceInfo();\n    const appUrl = `${thisDevice.host}:${appPort}`;\n    const previewUrl = `${appUrl}/preview`;\n    const apiPath = `${appUrl}/api`;\n\n    cached = {\n      appPort, version, appUrl, previewUrl, apiPath\n    };\n\n    np.set('pluginInfo', cached);\n  }\n\n  return cached;\n}\n"]}