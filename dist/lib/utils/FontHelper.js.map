{"version":3,"file":"FontHelper.js","sourceRoot":"","sources":["../../../src/lib/utils/FontHelper.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,2BAAiC;AACjC,6EAAsC;AACtC,qCAAqC;AACrC,gDAAwB;AAIX,QAAA,QAAQ,GAAG,uCAAuC,CAAC;AAChE,MAAM,SAAS,GAAG;IAChB,MAAM;IACN,MAAM;IACN,OAAO;IACP,QAAQ;CACT,CAAC;AAEF,MAAqB,UAAU;IAE7B,MAAM,CAAC,QAAQ;QACb,IAAI,CAAC,IAAA,kBAAS,EAAC,gBAAQ,CAAC,EAAE,CAAC;YACzB,2BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,8CAA8C,gBAAQ,kBAAkB,CAAC,CAAC;YAC9F,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,IAAI,KAAK,CAAC;QACV,IAAI,CAAC;YACH,KAAK,GAAG,IAAA,gBAAW,EAAC,gBAAQ,CAAC,CAAC;QAChC,CAAC;QACD,OAAO,KAAK,EAAE,CAAC;YACb,2BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,gCAAgC,gBAAQ,MAAM,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YAC5H,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,cAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;IAClF,CAAC;IAED,MAAM,CAAC,wBAAwB,CAA+B,GAAG,QAAoD;QACnH,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC9B,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3D,KAAK,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,QAAQ,EAAE,CAAC;YACrC,MAAM,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YACvE,EAAE,CAAC,OAAO,GAAG,CAAE,uBAAA,IAAI,mDAA6B,MAAjC,IAAI,CAA+B,EAAE,GAAG,OAAO,CAAE,CAAC;YACjE,EAAE,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,GAAG,QAAQ,EAAE,CAAC,CAAC,CAAC,uBAAA,IAAI,mDAA6B,MAAjC,IAAI,CAA+B,CAAC;QAC9E,CAAC;IACH,CAAC;CAKF;;IAFG,OAAO,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,2BAAE,CAAC,OAAO,CAAC,qBAAqB,CAAC,EAAE,CAAC;AACjE,CAAC;kBA9BkB,UAAU","sourcesContent":["import { readdirSync } from 'fs';\nimport np from '../NowPlayingContext';\nimport { dirExists } from './System';\nimport path from 'path';\nimport { type UIConfigSelect } from '../config/UIConfig';\nimport { type UIConfigSectionKey } from '../config/UIConfigSchema';\n\nexport const FONT_DIR = '/data/INTERNAL/NowPlayingPlugin/Fonts';\nconst FONT_EXTS = [\n  '.ttf',\n  '.otf',\n  '.woff',\n  '.woff2'\n];\n\nexport default class FontHelper {\n\n  static getFonts() {\n    if (!dirExists(FONT_DIR)) {\n      np.getLogger().warn(`[now-playing] Could not obtain font list: \"${FONT_DIR}\" does not exist`);\n      return [];\n    }\n    let files;\n    try {\n      files = readdirSync(FONT_DIR);\n    }\n    catch (error) {\n      np.getLogger().warn(`[now-playing] Error reading \"${FONT_DIR}\": ${error instanceof Error ? error.message : String(error)}`);\n      return [];\n    }\n    return files.filter((f) => FONT_EXTS.includes(path.parse(f).ext.toLowerCase()));\n  }\n\n  static fillUIConfSelectElements<K extends UIConfigSectionKey>(...elements: { el: UIConfigSelect<K>, value: string }[]) {\n    const fonts = this.getFonts();\n    const options = fonts.map((f) => ({ value: f, label: f }));\n    for (const { el, value } of elements) {\n      const selected = value ? options.find((o) => o.value === value) : null;\n      el.options = [ this.#getUIConfSelectDefaultEntry(), ...options ];\n      el.value = selected ? { ...selected } : this.#getUIConfSelectDefaultEntry();\n    }\n  }\n\n  static #getUIConfSelectDefaultEntry() {\n    return { value: '', label: np.getI18n('NOW_PLAYING_DEFAULT') };\n  }\n}\n"]}