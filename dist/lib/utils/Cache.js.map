{"version":3,"file":"Cache.js","sourceRoot":"","sources":["../../../src/lib/utils/Cache.ts"],"names":[],"mappings":"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","sourcesContent":["import NodeCache from 'node-cache';\n\nexport default class Cache {\n\n  #ttl: {\n    [type: string]: number;\n  };\n  #maxEntries: {\n    [type: string]: number;\n  };\n  #cache: NodeCache;\n  #enabled: boolean;\n\n  constructor(ttl: { [type: string]: number; } = {}, maxEntries: { [type: string]: number; } = {}) {\n    this.#ttl = ttl;\n    this.#maxEntries = maxEntries;\n    this.#cache = new NodeCache({\n      checkperiod: 600\n    });\n    this.#enabled = true;\n  }\n\n  setTTL(type: string, ttl: number) {\n    if (this.#ttl[type] != ttl) {\n      const keys = this.getKeys(type);\n      for (const key of keys) {\n        this.#cache.ttl(key, ttl);\n      }\n    }\n    this.#ttl[type] = ttl;\n  }\n\n  setMaxEntries(type: string, maxEntries: number) {\n    this.#reduceEntries(type, maxEntries);\n    this.#maxEntries[type] = maxEntries;\n  }\n\n  getMaxEntries(type: string) {\n    return this.#maxEntries[type] !== undefined ? this.#maxEntries[type] : -1;\n  }\n\n  isEnabled() {\n    return this.#enabled;\n  }\n\n  setEnabled(value: boolean) {\n    this.#enabled = value;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-parameters\n  get<T>(type: string, key: string): T | undefined {\n    if (!this.isEnabled()) {\n      return undefined;\n    }\n    return this.#cache.get(`${type}.${key}`);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-parameters\n  put<T>(type: string, key: string, value: T) {\n    if (!this.isEnabled()) {\n      return;\n    }\n    const maxEntries = this.getMaxEntries(type);\n    if (maxEntries === 0) {\n      return false;\n    }\n    else if (maxEntries > 0) {\n      this.#reduceEntries(type, maxEntries - 1);\n    }\n    return this.#cache.set(`${type}.${key}`, value, this.#ttl[type]);\n  }\n\n  #reduceEntries(type: string, reduceTo: number) {\n    if (reduceTo === undefined) {\n      reduceTo = this.getMaxEntries(type);\n    }\n    if (reduceTo < 0) {\n      return;\n    }\n    const keys = this.getKeys(type);\n    if (keys.length > reduceTo) {\n      for (let i = 0; i < keys.length - reduceTo; i++) {\n        this.#cache.del(keys[i]);\n      }\n    }\n  }\n\n  getKeys(type: string) {\n    return this.#cache.keys().filter((key) => key.startsWith(`${type}.`));\n  }\n\n  clear(type?: string) {\n    if (!type) {\n      this.#cache.flushAll();\n    }\n    else {\n      this.getKeys(type).forEach((key) => {\n        this.#cache.del(key);\n      });\n    }\n  }\n\n  async getOrSet<T>(type: string, key: string, promiseCallback: () => Promise<T>): Promise<T> {\n    if (!this.isEnabled()) {\n      return promiseCallback();\n    }\n    const cachedValue = this.get<T>(type, key);\n    if (cachedValue !== undefined) {\n      return cachedValue;\n    }\n\n    return promiseCallback().then((value) => {\n      this.put(type, key, value);\n      return value;\n    });\n  }\n}\n"]}