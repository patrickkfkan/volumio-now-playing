{"version":3,"file":"FSMonitor.js","sourceRoot":"","sources":["../../../src/lib/utils/FSMonitor.ts"],"names":[],"mappings":"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","sourcesContent":["import * as SystemUtils from './System';\nimport np from '../NowPlayingContext';\nimport chokidar from 'chokidar';\n\nexport type FSMonitorEvent = 'add' | 'unlink' | 'addDir' | 'unlinkDir';\n\nexport default abstract class FSMonitor<T extends FSMonitorEvent[]> {\n\n  abstract name: string;\n  #status: 'initializing' | 'running' | 'updating' | 'stopped';\n  #events: FSMonitorEvent[];\n  #watcher: ReturnType<typeof chokidar['watch']> | null;\n  #monitorDir: string;\n\n  constructor(monitorDir: string, events: T) {\n    this.#monitorDir = monitorDir;\n    this.#events = events;\n    this.#status = 'stopped';\n    this.#watcher = null;\n  }\n\n  start() {\n    if (!SystemUtils.dirExists(this.#monitorDir)) {\n      np.getLogger().warn(`[now-playing] ${this.#monitorDir} does not exist. ${this.name} will not start.`);\n      return;\n    }\n    np.getLogger().info(`[now-playing] ${this.name} commencing initial scanning of ${this.#monitorDir}`);\n    this.#watcher = chokidar.watch(this.#monitorDir);\n    if (this.#events.includes('add')) {\n      this.#watcher.on('add', this.#preHandleEvent.bind(this, 'add'));\n    }\n    if (this.#events.includes('unlink')) {\n      this.#watcher.on('unlink', this.#preHandleEvent.bind(this, 'unlink'));\n    }\n    if (this.#events.includes('addDir')) {\n      this.#watcher.on('addDir', this.#preHandleEvent.bind(this, 'addDir'));\n    }\n    if (this.#events.includes('unlinkDir')) {\n      this.#watcher.on('unlinkDir', this.#preHandleEvent.bind(this, 'unlinkDir'));\n    }\n    this.#watcher.on('ready', () => {\n      np.getLogger().info(`[now-playing] ${this.name} has completed initial scanning`);\n      np.getLogger().info(`[now-playing] ${this.name} is now watching ${this.#monitorDir}`);\n      this.#status = 'running';\n    });\n    this.#status = 'initializing';\n  }\n\n  #preHandleEvent(event: FSMonitorEvent, path: string) {\n    const oldStatus = this.#status;\n    if (oldStatus === 'running') {\n      this.#status = 'updating';\n    }\n    this.handleEvent(event, path);\n    this.#status = oldStatus;\n  }\n\n  async stop() {\n    if (this.#watcher) {\n      await this.#watcher.close();\n      this.#watcher = null;\n    }\n    this.#status = 'stopped';\n    np.getLogger().warn(`[now-playing] ${this.name} stopped`);\n  }\n\n  get status() {\n    return this.#status;\n  }\n\n  protected abstract handleEvent(event: T[number], path: string): void;\n}\n"]}