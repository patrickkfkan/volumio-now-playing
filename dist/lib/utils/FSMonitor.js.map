{"version":3,"file":"FSMonitor.js","sourceRoot":"","sources":["../../../src/lib/utils/FSMonitor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sDAAwC;AACxC,6EAAsC;AACtC,wDAAgC;AAEhC,MAA8B,SAAS;IAOrC,YAAY,UAAkB;QAJ9B,oCAA+B;QAC/B,qCAAsD;QACtD,wCAAoB;QAGlB,uBAAA,IAAI,yBAAe,UAAU,MAAA,CAAC;QAC9B,uBAAA,IAAI,qBAAW,SAAS,MAAA,CAAC;QACzB,uBAAA,IAAI,sBAAY,IAAI,MAAA,CAAC;IACvB,CAAC;IAED,KAAK;QACH,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,uBAAA,IAAI,6BAAY,CAAC,EAAE;YAC5C,2BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,iBAAiB,uBAAA,IAAI,6BAAY,oBAAoB,IAAI,CAAC,IAAI,kBAAkB,CAAC,CAAC;YACtG,OAAO;SACR;QACD,uBAAA,IAAI,sBAAY,kBAAQ,CAAC,KAAK,CAAC,uBAAA,IAAI,6BAAY,CAAC,MAAA,CAAC;QACjD,uBAAA,IAAI,0BAAS,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;QAC5D,uBAAA,IAAI,0BAAS,CAAC,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;QAClE,uBAAA,IAAI,0BAAS,CAAC,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;QAClE,uBAAA,IAAI,0BAAS,CAAC,EAAE,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC,CAAC;QACxE,2BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI,oBAAoB,uBAAA,IAAI,6BAAY,EAAE,CAAC,CAAC;QACtF,uBAAA,IAAI,qBAAW,SAAS,MAAA,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,IAAI;QACR,IAAI,uBAAA,IAAI,0BAAS,EAAE;YACjB,MAAM,uBAAA,IAAI,0BAAS,CAAC,KAAK,EAAE,CAAC;YAC5B,uBAAA,IAAI,sBAAY,IAAI,MAAA,CAAC;SACtB;QACD,uBAAA,IAAI,qBAAW,SAAS,MAAA,CAAC;QACzB,2BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI,UAAU,CAAC,CAAC;IAC5D,CAAC;IAED,IAAI,MAAM;QACR,OAAO,uBAAA,IAAI,yBAAQ,CAAC;IACtB,CAAC;CAGF;AAzCD,4BAyCC","sourcesContent":["import * as SystemUtils from './System';\nimport np from '../NowPlayingContext';\nimport chokidar from 'chokidar';\n\nexport default abstract class FSMonitor {\n\n  abstract name: string;\n  #status: 'running' | 'stopped';\n  #watcher: ReturnType<typeof chokidar['watch']> | null;\n  #monitorDir: string;\n\n  constructor(monitorDir: string) {\n    this.#monitorDir = monitorDir;\n    this.#status = 'stopped';\n    this.#watcher = null;\n  }\n\n  start() {\n    if (!SystemUtils.dirExists(this.#monitorDir)) {\n      np.getLogger().warn(`[now-playing] ${this.#monitorDir} does not exist. ${this.name} will not start.`);\n      return;\n    }\n    this.#watcher = chokidar.watch(this.#monitorDir);\n    this.#watcher.on('add', this.handleEvent.bind(this, 'add'));\n    this.#watcher.on('unlink', this.handleEvent.bind(this, 'unlink'));\n    this.#watcher.on('addDir', this.handleEvent.bind(this, 'addDir'));\n    this.#watcher.on('unlinkDir', this.handleEvent.bind(this, 'unlinkDir'));\n    np.getLogger().warn(`[now-playing] ${this.name} is now watching ${this.#monitorDir}`);\n    this.#status = 'running';\n  }\n\n  async stop() {\n    if (this.#watcher) {\n      await this.#watcher.close();\n      this.#watcher = null;\n    }\n    this.#status = 'stopped';\n    np.getLogger().warn(`[now-playing] ${this.name} stopped`);\n  }\n\n  get status() {\n    return this.#status;\n  }\n\n  protected abstract handleEvent(event: 'add' | 'unlink' | 'addDir' | 'unlinkDir', path: string): void;\n}\n"]}