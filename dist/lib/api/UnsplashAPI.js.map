{"version":3,"file":"UnsplashAPI.js","sourceRoot":"","sources":["../../../src/lib/api/UnsplashAPI.ts"],"names":[],"mappings":";;AACA,MAAM,QAAQ,GAAG,yCAAyC,CAAC;AAC3D,MAAM,YAAY,GAAG,oCAAoC,CAAC;AAC1D,MAAM,QAAQ,GAAG,EAAE,CAAC;AACpB,MAAM,WAAW,GAAG,GAAG,CAAC;AAExB,MAAM,WAAW;IAEf,KAAK,CAAC,cAAc,CAAC,MAAkD;QACrE,MAAM,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,MAAM,CAAC;QAClC,MAAM,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;QAErD,MAAM,OAAO,GAAG,KAAK,EAAE,GAAQ,EAAE,IAAI,GAAG,CAAC,EAAE,EAAE;YAC3C,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC9C,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;YAC9B,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;QACrB,CAAC,CAAC;QAEF,MAAM,QAAQ,GAAG,GAAG,EAAE;YACpB,8GAA8G;YAC9G,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YACxD,MAAM,cAAc,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;YACzE,MAAM,GAAG,GAAG,GAAG,YAAY,IAAI,cAAc,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;YACrE,OAAO,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;QACtD,CAAC,CAAC;QAEF,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC9B,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAC3C,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,UAAU,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;QAEzD,IAAI,SAAS,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC;YACpD,MAAM,KAAK,GAAG,SAAS,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;YACxC,MAAM,WAAW,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC;YAClF,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;QACtD,CAAC;QAED,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC;QACtC,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;QAC/B,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,OAAO,QAAQ,EAAE,CAAC;QACpB,CAAC;QAED,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,KAAK,GAAG,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU;QAC9G,MAAM,kBAAkB,GAAG;YACzB,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAC,EAAE,UAAU;YACzD,MAAM,EAAE,YAAY,GAAG,QAAQ;SAChC,CAAC;QAEF,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,GAAG,EAAE,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAC/D,IAAI,MAAM,GAAG,UAAU,CAAC,OAAO,EAAE,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAC7D,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,QAAQ,EAAE,CAAC;QACpB,CAAC;QAED,IAAI,SAAS,EAAE,CAAC;YACd,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;YACvD,MAAM,WAAW,GAAG,CAAC,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;YAChE,IAAI,UAAU,GAAG,SAAS,CAAC,CAAC,IAAI,WAAW,GAAG,SAAS,CAAC,CAAC,EAAE,CAAC;gBAC1D,MAAM,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAQ,EAAE,EAAE;oBAC5C,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;oBACvD,MAAM,cAAc,GAAG,CAAC,aAAa,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC;oBAChE,OAAO,aAAa,IAAI,SAAS,CAAC,CAAC,IAAI,cAAc,IAAI,SAAS,CAAC,CAAC,CAAC;gBACvE,CAAC,CAAC,IAAI,MAAM,CAAC;YACf,CAAC;QACH,CAAC;QAED,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC;QACnC,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,OAAO,QAAQ,EAAE,CAAC;QACpB,CAAC;QAED,IAAI,SAAS,EAAE,CAAC;YACd,OAAO,GAAG,SAAS,WAAW,SAAS,CAAC,CAAC,EAAE,CAAC;QAC9C,CAAC;QAED,OAAO,GAAG,SAAS,OAAO,CAAC;IAC7B,CAAC;CACF;AAED,MAAM,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;AAEtC,kBAAe,WAAW,CAAC","sourcesContent":["\nconst BASE_URL = 'https://unsplash.com/napi/search/photos';\nconst FALLBACK_URL = 'https://source.unsplash.com/random';\nconst PER_PAGE = 20;\nconst SAMPLE_SIZE = 500;\n\nclass UnsplashAPI {\n\n  async getRandomPhoto(params: { keywords: string, w: number, h: number }) {\n    const { keywords, w, h } = params;\n    const matchSize = (w > 0 && h > 0) ? { w, h } : null;\n\n    const doFetch = async (url: URL, page = 1) => {\n      url.searchParams.set('page', page.toString());\n      const resp = await fetch(url);\n      return resp.json();\n    };\n\n    const fallback = () => {\n      // Fallback to using 'https://source.unsplash.com/random/...' (deprecated; occasional 503 response as of late)\n      const qs = keywords ? encodeURIComponent(keywords) : '';\n      const screenSizePart = matchSize ? `${matchSize.w}x${matchSize.h}/` : '';\n      const url = `${FALLBACK_URL}/${screenSizePart}${qs ? `?${qs}` : ''}`;\n      return `${url + (qs ? '&' : '?')}sig=${Date.now()}`;\n    };\n\n    const url = new URL(BASE_URL);\n    url.searchParams.append('query', keywords);\n    url.searchParams.append('per_page', PER_PAGE.toString());\n\n    if (matchSize && matchSize.w > 0 && matchSize.h > 0) {\n      const ratio = matchSize.w / matchSize.h;\n      const orientation = ratio > 1 ? 'landscape' : ratio < 1 ? 'portrait' : 'squarish';\n      url.searchParams.append('orientation', orientation);\n    }\n\n    const firstFetch = await doFetch(url);\n    const total = firstFetch.total;\n    if (!total) {\n      return fallback();\n    }\n\n    const randomOffset = Math.floor(Math.random() * ((total > SAMPLE_SIZE ? SAMPLE_SIZE : total) - 1)); // 0-based\n    const randomOffsetToPage = {\n      page: Math.floor(randomOffset / PER_PAGE) + 1, // 1-based\n      offset: randomOffset % PER_PAGE\n    };\n\n    const finalFetch = await doFetch(url, randomOffsetToPage.page);\n    let result = finalFetch.results?.[randomOffsetToPage.offset];\n    if (!result) {\n      return fallback();\n    }\n\n    if (matchSize) {\n      const matchWidth = Math.min(matchSize.w, result.width);\n      const matchHeight = (matchWidth / result.width) * result.height;\n      if (matchWidth < matchSize.w || matchHeight < matchSize.h) {\n        result = finalFetch.results.find((img: any) => {\n          const matchImgWidth = Math.min(matchSize.w, img.width);\n          const matchImgHeight = (matchImgWidth / img.width) * img.height;\n          return matchImgWidth >= matchSize.w && matchImgHeight >= matchSize.h;\n        }) || result;\n      }\n    }\n\n    const resultUrl = result.urls?.raw;\n    if (!resultUrl) {\n      return fallback();\n    }\n\n    if (matchSize) {\n      return `${resultUrl}&q=80&w=${matchSize.w}`;\n    }\n\n    return `${resultUrl}&q=80`;\n  }\n}\n\nconst unsplashAPI = new UnsplashAPI();\n\nexport default unsplashAPI;\n"]}