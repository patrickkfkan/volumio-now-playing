{"version":3,"file":"ConfigHelper.js","sourceRoot":"","sources":["../../../src/lib/config/ConfigHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import locales from 'windows-locale';\nimport np from '../NowPlayingContext';\n\ninterface ListEntry {\n  value: string;\n  label: string;\n}\n\nexport default class ConfigHelper {\n\n  static parseCoordinates(str: string) {\n    if (!str) {\n      return null;\n    }\n    const parts = str.split(',');\n    if (parts[0] !== undefined && parts[1] !== undefined) {\n      const lat = parseFloat(parts[0]);\n      const lon = parseFloat(parts[1]);\n\n      if (!isNaN(lat) && !isNaN(lon)) {\n        return { lat, lon };\n      }\n    }\n\n    return null;\n  }\n\n  static getVolumioLocale() {\n    return np.getLanguageCode().replace('_', '-');\n  }\n\n  static getLocaleList() {\n    let localeList = np.get<ListEntry[]>('localeList');\n    const matchVolumioLabel = np.getI18n('NOW_PLAYING_LOCALE_VOLUMIO', this.getVolumioLocale());\n    if (!localeList) {\n      localeList = [\n        {\n          value: 'matchVolumio',\n          label: matchVolumioLabel\n        },\n        {\n          value: 'matchClient',\n          label: np.getI18n('NOW_PLAYING_LOCALE_CLIENT')\n        },\n        {\n          value: 'localeListDivider',\n          label: '----------------------------------------'\n        }\n      ];\n      for (const lc of Object.values(locales)) {\n        localeList.push({\n          value: lc.tag,\n          label: `${lc.language + (lc.location ? ` (${lc.location})` : '')} - ${lc.tag}`\n        });\n      }\n      np.set('localeList', localeList);\n    }\n    else {\n      localeList[0].label = matchVolumioLabel;\n    }\n    return localeList;\n  }\n\n  static async getTimezoneList() {\n    let timezoneList = np.get<ListEntry[]>('timezoneList');\n    if (!timezoneList) {\n      timezoneList = [\n        {\n          value: 'matchClient',\n          label: np.getI18n('NOW_PLAYING_TIMEZONE_CLIENT')\n        },\n        {\n          value: 'matchGeoCoordinates',\n          label: np.getI18n('NOW_PLAYING_TIMEZONE_GEO_COORD')\n        },\n        {\n          value: 'timezoneListDivider',\n          label: '----------------------------------------'\n        }\n      ];\n      const ct = await import('countries-and-timezones');\n      for (const tz of Object.values(ct.getAllTimezones())) {\n        timezoneList.push({\n          value: tz.name,\n          label: `${tz.name} (GMT${tz.utcOffsetStr})`\n        });\n      }\n      np.set('timezoneList', timezoneList);\n    }\n    return timezoneList;\n  }\n}\n"]}