{"version":3,"file":"UIConfig.js","sourceRoot":"","sources":["../../../src/lib/config/UIConfig.ts"],"names":[],"mappings":"","sourcesContent":["import { type UIConfigElementOf, type UIConfigSectionContentKeyOf, type UIConfigSectionKey } from './UIConfigSchema';\n\nexport interface UIConfig {\n  page: {\n    label?: string;\n  },\n  sections: UIConfigSection<UIConfigSectionKey>[]\n}\n\nexport type UIConfigElementType = 'input' | 'button' | 'select' | 'switch';\nexport type UIConfigInputType = 'text' | 'number' | 'color';\n\nexport interface UIConfigElementBase<K extends UIConfigSectionKey> {\n  id: UIConfigSectionContentKeyOf<K>;\n  element: UIConfigElementType;\n  label: string;\n  doc?: string;\n  attributes?: Record<string, string>[];\n  visibleIf? : {\n    field: UIConfigSectionContentKeyOf<K>;\n    value: string | number | boolean;\n  }\n}\n\nexport type UIConfigElement<K extends UIConfigSectionKey> =\n                              UIConfigInput<K, UIConfigInputType> |\n                              UIConfigSelect<K> |\n                              UIConfigButton<K> |\n                              UIConfigSwitch<K> |\n                              any;\n\nexport interface UIConfigSection<K extends UIConfigSectionKey> {\n  id: K;\n  element: 'section';\n  label?: string;\n  description?: string;\n  icon?: string;\n  onSave?: {\n    type: string;\n    endpoint: string;\n    method: string;\n  };\n  saveButton?: {\n    label: string;\n    data: UIConfigSectionContentKeyOf<K>[];\n  };\n  content?: UIConfigElement<K>[];\n}\n\nexport interface UIConfigInput<K extends UIConfigSectionKey, T extends UIConfigInputType> extends UIConfigElementBase<K> {\n  element: 'input',\n  type: T;\n  value: T extends 'number' ? number | '' :\n         T extends 'color' ? string :\n         string;\n}\n\nexport interface UIConfigSelect<K extends UIConfigSectionKey> extends UIConfigElementBase<K> {\n  element: 'select';\n  doc?: string;\n  value: {\n    value: string;\n    label: string;\n  };\n  options: {\n    value: string;\n    label: string;\n  }[];\n}\n\nexport interface UIConfigButton<K extends UIConfigSectionKey> extends UIConfigElementBase<K> {\n  element: 'button';\n  onClick: {\n    type: 'emit';\n    message: 'callMethod';\n    data: {\n      endpoint: string;\n      method: string;\n      data?: any;\n    };\n  } | {\n    type: 'openUrl';\n    url: string;\n  };\n}\n\nexport interface UIConfigSwitch<K extends UIConfigSectionKey> extends UIConfigElementBase<K> {\n  element: 'switch';\n  value: boolean;\n}\n\nexport type ObservedUIConfig = UIConfig & {\n  [K in UIConfigSectionKey]: ObservedUIConfigSection<K>;\n}\n\nexport type ObservedUIConfigSection<K extends UIConfigSectionKey> = UIConfigSection<K> & {\n  content: ObservedUIConfigSectionContent<K>;\n}\n\nexport type ObservedUIConfigSectionContent<K extends UIConfigSectionKey> = UIConfigSection<K>['content'] & {\n  [C in UIConfigSectionContentKeyOf<K>]: UIConfigElementOf<K, C>;\n}\n"]}