{"version":3,"file":"config_from_0_5_5.js","sourceRoot":"","sources":["../../../../src/lib/config/updaters/config_from_0_5_5.ts"],"names":[],"mappings":";;;;;AAUA,wBAKC;AAfD,kDAA6F;AAC7F,gFAAyC;AAEzC;;;GAGG;AAEH,MAAM,UAAU,GAAG,OAAO,CAAC;AAE3B,SAAgB,MAAM;IACpB,4BAA4B,EAAE,CAAC;IAC/B,2BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,4CAA4C,UAAU,EAAE,CAAC,CAAC;IAC9E,2BAAE,CAAC,cAAc,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;IAC/C,2BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;AACvD,CAAC;AAED,SAAS,4BAA4B;IACnC;;;;;OAKG;IACH,MAAM,QAAQ,GAAG,2BAAE,CAAC,cAAc,CAAC,mBAA0B,EAAE,IAAI,CAAC,CAAC;IACrE,IAAI,WAAmC,CAAC;IACxC,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE,CAAC;QACjC,WAAW,GAAG;YACZ,GAAG,4CAA6B;YAChC,mBAAmB,EAAE,QAAQ;SAC9B,CAAC;IACJ,CAAC;SACI,CAAC;QACJ,WAAW,GAAG,EAAC,GAAG,4CAA6B,EAAC,CAAC;IACnD,CAAC;IACD,2BAAE,CAAC,cAAc,CAAC,iBAAiB,EAAE,WAAW,CAAC,CAAC;IAClD,2BAAE,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC;IAC1C,2BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,4DAA4D,CAAC,CAAC;AACpF,CAAC","sourcesContent":["import { DefaultMetadataServiceOptions, type MetadataServiceOptions } from '../PluginConfig';\nimport np from '../../NowPlayingContext';\n\n/**\n * Update:\n * - `theme`: from string to { active: string; }\n */\n\nconst TO_VERSION = '0.5.6';\n\nexport function update() {\n  updateMetadataServiceOptions();\n  np.getLogger().info(`[now-playing] Updating config version to ${TO_VERSION}`);\n  np.setConfigValue('configVersion', TO_VERSION);\n  np.getLogger().info('[now-playing] Update complete');\n}\n\nfunction updateMetadataServiceOptions() {\n  /**\n   * Old version has 'geniusAccessToken' value of string type, current is held in\n   * object of type MetadataServiceOptions{ geniusAccessToken: string; ... }.\n   * Here, we test whether geniusAccessToken value exists as a standalone setting and, if so,\n   * place it in an object of type MetadataServiceOptions, followed by saving said object.\n   */\n  const rawValue = np.getConfigValue('geniusAccessToken' as any, true);\n  let updateValue: MetadataServiceOptions;\n  if (typeof rawValue === 'string') {\n    updateValue = {\n      ...DefaultMetadataServiceOptions,\n      'geniusAccessToken': rawValue\n    };\n  }\n  else {\n    updateValue = {...DefaultMetadataServiceOptions};\n  }\n  np.setConfigValue('metadataService', updateValue);\n  np.deleteConfigValue('geniusAccessToken');\n  np.getLogger().info('[now-playing] Updated config value for \\'metadataService\\'');\n}\n"]}